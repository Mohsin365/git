{}.........some extra info related to commands
().........more use of commands



git is distributed version control system
git keeps snapshot of the state of project i.e,
	it keeps pointer to that state, therefore uses less memory
three stages -- tracking(initializing), staging, commiting



#######################		BASIC		##########################

git pwd.........present working directory
git ls............lists contents of directory
git cd <path of directory> ........... change directory


git status........check status of git
git init.......... initialize git in target directory....
			 i.e., git starts keeping track of the target directory
git add --a or git add .	..........stage all files in directory....
			 stage means which files/directories you want to commit
git add <name of file>........stage this particular file
git commit.........save/snapshot upto this point of time....
			you can now return back to this point if anything goes wrong
(	git commit -m "<write comment here>"....... commit with a message of what 
	was changed		
)

rm -rf .git............removes repository


####################	CLONING REPO, IGNORING FILES, COMPARING	######################

git clone <URL of repository>.............downloads the repository

git .gitignore..........makes a file named ".gitignore" in which you can write....
				names of files/directories that you want to ignore while commiting....
					e.g., to ignore file named "abc.log", write it in .gitignore file,....

(	<*.extension>.........ignores all files with this extension
	/<directory name>/............ignores only outer directory with this name.....
	any other directory in another folder/directory with the same name will not be affected....
	you can provide full path of the file you want to ignore also	
)	

git diff...........compares working directory with staging area
git diff --stage............compares previous commit with present staging area


###########################		SKIPPING STAGING AREA		#########################

{	
	tracked files means they are already staged	
}

git commit -a -m "<comment if you want>".........all tracked files are staged + commited....
		i.e., skips staging/ if any new file is untracked, that will not be staged and commited



#######################		MOVING, RENAMING FILES		############################

git rm <name of file>...........deletes the file

{	
	to rename we use move command 'mv' like linux	
}

git mv <present name of file> <new name you want>........renames the file

{	
	after using above 2 commands, git itself stages	
}

{	
	if you rename a file say "abc.txt" to "xyz.txt" (not using git), git will treat it as....
	deleting the file "abc.txt" and adding new file "xyz.txt" taht is untracked ,then you....
	have to add "xyz.txt" to staging area, and git will now know that it was actually renamed	
}

git rm --cached <file name>.........untrack the file

{
	if you are TRACKING A FILE ALREADY say "index.html"; and now you want to ignore this file....
	while commiting, you write its name in .gitignore file, then add everything to staging area,....
	and commit also ; now if you change anything in "index.html" and then run 'git status',....
	this should not affect git, however git will show that "index.html" has been modified....
	
	this happens because you were already tracking this file earlier, and we have to explicitly....
	untrack this file using above command, and for git the file will be deleted
}


##########################	VIEWING AND CHANGING COMMITS	########################

git log ........... shows all the commits
(	 use rrow keys to move down and see more commits,
	 press 'q' to exit the commits pager	
)


git log -p............shows all commits + what was added/deleted
git log -p -2............shows 2 commits + what was changed

git log --stat..........shows in short summary of commits and changes
git log --pretty=oneline.............shows all commits in one line

(	git log --pretty=short...............shows commits with author and message
	git log --pretty=full...............shows commits with author, message and committer
)

git log --since=2.days...........shows commits since last 2 days, 
git log --since=4.months.......shows commits since last 4 months

(	similarly git log --since=x.weeks,   git log --since=x.years.......x = any +ve integer
)

git log --pretty=format:"%h -- %an"..............shows commits in user defined format

(	%h means commit hash , %an means author name
	Similarly, %ae means author email, %ce means committer email....etc

	can check git documentation for more pretty formats
)

{
	press 'i' to write, 'esc key' to stop writing, at bottom press ':wq' to commit and exit vim
}

git commit --amend...........vim editor opens, where you can merge your changes + message 
			to any other previous commit


##########################	 UNSTAGING, MODIFYING, RESTORING FILES		##########################

git restore --staged <file name>...........to unstage a file
git checkout -- <file name>................to undo changes made in a file/directory and go back to....
					 what it was like in previous commit
(	doesn't work with .gitignore file
)

git checkout -f..................to undo all the changes made in all files....
			and go back to previous commit state
(	works with .gitignore also
)


######################### 	REMOTE REPOSITORIES	########################

{
	remote refers to any website that hosts git repositories on internet e.g., github, gitlab etc.
	pull ----- means get code from remote repository
	push ----- means to send your code to remote repository

}

{
	after making a repository in remote website, say github, use below commands
}

git remote add origin <github repository URL> .......... tells git to add a remote named 'origin'....
					with given URL.... you can use your own name for remote instead....
					of 'origin' .... however, 'origin' is common

git remote ............. shows all remotes aka website URLs

git remote -v .......... shows 2 URLs, one...to push, second...to fetch/pull
				 these 2 URLs can be same or different

git push -u origin master ........... push your code to remote, here 'origin'

(	sometimes instead of master, try main
	git push -u origin main
) 

{
	if git shows error: permission denied
	then, you need to generate SSH key first and add it to github or any other remote

	SSH key is needed so that only the person with that key can push/pull from that repository
	Otherwise, anyone can push/pull from that repository 
}

{
	go to settings in github
	go to SSH/GPG keys
	press 'New SSH key' and give it a name
	Now you need to paste key here
}

ssh-keygen -t rsa -b 4096 -C <"email used in github"> ........ generates key and saves it in your PC

eval $(ssh-agent -s) .......... to ensure if SSH agent is running....shows Agent pid (ID)

ssh-add ~/.ssh/id_rsa ......... add SSH private key to SSH agent

tail ~/.ssh/id_rsa.pub ........ shows your SSH key....can copy now
OR
clip ~/.ssh/id_rsa.pub ........ copies SSH key to clipboard

{
	Now paste SSH key in github/remote and add it
	git push -u origin master... will work now
	
}




#################################	 ALIAS		#######################################

git config --global alias.<your alias> <'name of command'> ........now you can use your alias as....

 		git command e.g., git config --global alias.st status.......sets st for status....
		now, 'git st' works same as 'git status'


##########################	CREATING AND SWITCHING BRANCHES		#############################					

git checkout -b <name of new branch>................makes and switches to new branch
git checkout master....................switches to master branch
git checkout <name of any branch created before>...........switches to that branch

git branch ................... lists all branch names


##############################     	MERGING BRANCHES		####################################

{
	before switching to another branch, it is good practice to keep your current branch clean....
	and commit the changes
	
	To merge current branch to its main branch,....
		go to the main branch and type below command
}

git merge <branch name>.........to merge this branch to its main branch....
				e.g., to merge 'xyz' barnch to 'master' branch,
					switch to master branch first
						git checkout master		
					then
						git merge xyz

(	while merging, it may show merging conflict.....that means the git is telling you that the two....
	branches have different changes for the same thing, both look important, so you choose....
	what change to accept i.e., ....
	accept/include either current change (current status) or incoming change (from branch)

)


############################		RESOLVING MERGE CONFLICTS	############################

{
	git shows merging conflicts using "conflict resolution markers" shown below....
	
	<<<<<< (current change)
		-------
		-------
			>>>>>> (incoming change)
	
	and asks which branch changes to keep
}

{
	after you choose which branch changes to keep, you use 'git add' command
}

git add <file name> .............. to tell git that conflict is resolved for this file....
				      and, then commit to merge child branch to main branch



###########################		BRANCH MANAGEMENT		############################

git branch .............. shows all the branches

git branch -v ............ shows branch, last commit & message

git branch --merged .......... shows those branches that are already merged

git branch --no-merged ......... shows those branches that are not merged

git branch -d <branch name> ............ deletes the branch only if it has been already merged....
					   otherwise, it shows error

git branch -D <branch name> ............ deletes the branch even if it has not been merged









